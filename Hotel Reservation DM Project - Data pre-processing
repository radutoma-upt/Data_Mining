{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4807272,"sourceType":"datasetVersion","datasetId":2783627}],"dockerImageVersionId":30673,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/radutoma74/hotel-reservation-dm-project?scriptVersionId=169963016\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-02T20:01:28.801553Z","iopub.execute_input":"2024-04-02T20:01:28.80206Z","iopub.status.idle":"2024-04-02T20:01:28.811671Z","shell.execute_reply.started":"2024-04-02T20:01:28.802025Z","shell.execute_reply":"2024-04-02T20:01:28.810041Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Homework 2:  Data pre-processing**","metadata":{}},{"cell_type":"markdown","source":"**Select one dataset**\n\nThe selected dataset is **[Hotel Reservations Dataset](https://www.kaggle.com/datasets/ahsan81/hotel-reservations-classification-dataset)**","metadata":{}},{"cell_type":"code","source":"#Reading dataset\ndf = pd.read_csv(\"/kaggle/input/hotel-reservations-classification-dataset/Hotel Reservations.csv\")\ndf = pd.DataFrame(df)  # construct a dataframe\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:07:04.644696Z","iopub.execute_input":"2024-04-02T20:07:04.645208Z","iopub.status.idle":"2024-04-02T20:07:04.781456Z","shell.execute_reply.started":"2024-04-02T20:07:04.645175Z","shell.execute_reply":"2024-04-02T20:07:04.780454Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **1. Identify the types of attributes:  quantitative (continuous or discrete values), qualitative (ordinal or nominal)**","metadata":{}},{"cell_type":"code","source":"#showing information about dataset\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:01:28.980948Z","iopub.execute_input":"2024-04-02T20:01:28.98144Z","iopub.status.idle":"2024-04-02T20:01:29.021001Z","shell.execute_reply.started":"2024-04-02T20:01:28.981397Z","shell.execute_reply":"2024-04-02T20:01:29.019771Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The analysis of the attributes of the data set results in the following classification:\n\n**Quantitative Attributes:**\n\n1. ***Continuous:***\n    * lead_time: Number of days between the booking date and arrival date\n    * avg_price_per_room: Average price per room\n    \n    \n2. ***Discrete:***\n    * no_of_adults: Number of adults for the booking \n    * no_of_children: Number of children for the booking \n    * no_of_weekend_nights: Number of weekend nights booked \n    * no_of_week_nights: Number of week nights booked \n    * required_car_parking_space: Whether a car parking space is required \n    * arrival_year: Year of arrival \n    * repeated_guest: Whether the guest is a repeat guest \n    * no_of_previous_cancellations: Number of previous cancellations \n    * no_of_previous_bookings_not_canceled: Number of previous bookings not canceled \n    * no_of_special_requests: Number of special requests made \n\n**Qualitative Attributes:**\n\n1. ***Ordinal:***\n    * arrival_month: Month of arrival\n    * arrival_date: Date of arrival\n    \n\n2. ***Nominal:***\n    * Booking_ID: Unique identifier for each booking \n    * type_of_meal_plan: Type of meal plan selected for the booking \n    * room_type_reserved: Type of room reserved \n    * market_segment_type: Market segment type \n    * booking_status: Status of the booking \n \n \n*Note:*\n\nThe *arrival_month* and *arrival_date* was classified as qualitative, ordinal because those have a natural ordering and seasonality (the hotel bookings may be influenced by the seasonality).","metadata":{}},{"cell_type":"markdown","source":"## 2. Select a quantitative attribute and apply (independently) the following transformations:","metadata":{}},{"cell_type":"markdown","source":"### a) Scaling (all values will be in [0,1])","metadata":{}},{"cell_type":"code","source":"# Scaling 'avg_price_per_room'\nfrom sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler(feature_range=(0, 1))\nAPPR = np.array(df[\"avg_price_per_room\"])\nscaler.fit(APPR.reshape(-1,1))\nAPPR_scaled=scaler.transform(APPR.reshape(-1,1))","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:01:29.022697Z","iopub.execute_input":"2024-04-02T20:01:29.02309Z","iopub.status.idle":"2024-04-02T20:01:29.030609Z","shell.execute_reply.started":"2024-04-02T20:01:29.023058Z","shell.execute_reply":"2024-04-02T20:01:29.029793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# analyze the distribution of original and scaled values\nimport matplotlib.pyplot as plt\nfig, axs = plt.subplots(1, 2)\naxs[0].scatter(range(len(APPR)),APPR)\naxs[1].scatter(range(len(APPR_scaled)),APPR_scaled)","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:01:29.033361Z","iopub.execute_input":"2024-04-02T20:01:29.033696Z","iopub.status.idle":"2024-04-02T20:01:29.740696Z","shell.execute_reply.started":"2024-04-02T20:01:29.033667Z","shell.execute_reply":"2024-04-02T20:01:29.739522Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### b) Standardization (after the transformation the attribute will have value 0 and standard deviation 1)","metadata":{}},{"cell_type":"code","source":"# standardization of 'avg_price_per_room'\nfrom sklearn import preprocessing\nscaler = preprocessing.StandardScaler()\nAPPR = np.array(df[\"avg_price_per_room\"])\nscaler.fit(APPR.reshape(-1,1))\nAPPR_std=scaler.transform(APPR.reshape(-1,1))","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:01:29.742187Z","iopub.execute_input":"2024-04-02T20:01:29.743111Z","iopub.status.idle":"2024-04-02T20:01:29.751091Z","shell.execute_reply.started":"2024-04-02T20:01:29.743077Z","shell.execute_reply":"2024-04-02T20:01:29.749783Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# comparison between the means of the original values and the transformed ones\n[np.mean(APPR),np.mean(APPR_std)]","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:01:29.753185Z","iopub.execute_input":"2024-04-02T20:01:29.753584Z","iopub.status.idle":"2024-04-02T20:01:29.764188Z","shell.execute_reply.started":"2024-04-02T20:01:29.753541Z","shell.execute_reply":"2024-04-02T20:01:29.762567Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# comparison between the standard deviations of the original values and the transformed ones\n[np.std(APPR),np.std(APPR_std)]","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:01:29.766089Z","iopub.execute_input":"2024-04-02T20:01:29.76648Z","iopub.status.idle":"2024-04-02T20:01:29.777477Z","shell.execute_reply.started":"2024-04-02T20:01:29.766416Z","shell.execute_reply":"2024-04-02T20:01:29.776099Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### c) Discretization (using 5 bins)","metadata":{}},{"cell_type":"code","source":"# discretization of the 'avg_price_per_room' attribute\nfrom sklearn import preprocessing\ndiscretizer = preprocessing.KBinsDiscretizer(n_bins=5, strategy='uniform', encode='ordinal')\nAPPR = np.array(df[\"avg_price_per_room\"])\nAPPR_discretized = discretizer.fit_transform(APPR.reshape(-1,1))","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:01:29.779256Z","iopub.execute_input":"2024-04-02T20:01:29.78048Z","iopub.status.idle":"2024-04-02T20:01:29.788226Z","shell.execute_reply.started":"2024-04-02T20:01:29.780445Z","shell.execute_reply":"2024-04-02T20:01:29.787285Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# analyze the distribution of original and discretized values\nimport matplotlib.pyplot as plt\nfig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)\naxs[0].hist(APPR, bins=5)\naxs[1].hist(APPR_discretized, bins=5)","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:01:29.789539Z","iopub.execute_input":"2024-04-02T20:01:29.790538Z","iopub.status.idle":"2024-04-02T20:01:30.468329Z","shell.execute_reply.started":"2024-04-02T20:01:29.790505Z","shell.execute_reply":"2024-04-02T20:01:30.467129Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3. Identify an attribute with missing values (if there is none, remove at most 5% of the values of one attribute to create one) and apply an imputation technique","metadata":{}},{"cell_type":"code","source":"# Check if there are missing values\ndf.isna().any()","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:07:20.943404Z","iopub.execute_input":"2024-04-02T20:07:20.944671Z","iopub.status.idle":"2024-04-02T20:07:20.976153Z","shell.execute_reply.started":"2024-04-02T20:07:20.944618Z","shell.execute_reply":"2024-04-02T20:07:20.974764Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport random\n\ndf_na = df\n# Calculate 5% of the total number of values\nnum_values_to_remove = int(0.05 * len(df_na))\n\n# Randomly select indices to replace with NaN\nindices_to_remove = random.sample(range(len(df_na)), num_values_to_remove)\n\n# Replace the selected indices with NaN\ndf_na.loc[indices_to_remove, 'avg_price_per_room'] = np.nan","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:07:33.375709Z","iopub.execute_input":"2024-04-02T20:07:33.37633Z","iopub.status.idle":"2024-04-02T20:07:33.38785Z","shell.execute_reply.started":"2024-04-02T20:07:33.376257Z","shell.execute_reply":"2024-04-02T20:07:33.386246Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_na.isna().any()","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:07:36.36464Z","iopub.execute_input":"2024-04-02T20:07:36.365108Z","iopub.status.idle":"2024-04-02T20:07:36.396732Z","shell.execute_reply.started":"2024-04-02T20:07:36.365076Z","shell.execute_reply":"2024-04-02T20:07:36.395307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Imputation of missing values\nfrom sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nAPPR = np.array(df_na[\"avg_price_per_room\"]).reshape(-1, 1)\nimp.fit(APPR)  # construct the imputation model based on the strategy\ndfImp = imp.transform(APPR) # apply the imputation model","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:24:21.382619Z","iopub.execute_input":"2024-04-02T20:24:21.383121Z","iopub.status.idle":"2024-04-02T20:24:21.393702Z","shell.execute_reply.started":"2024-04-02T20:24:21.383081Z","shell.execute_reply":"2024-04-02T20:24:21.392226Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dfImp","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:24:27.114954Z","iopub.execute_input":"2024-04-02T20:24:27.115351Z","iopub.status.idle":"2024-04-02T20:24:27.122107Z","shell.execute_reply.started":"2024-04-02T20:24:27.115313Z","shell.execute_reply":"2024-04-02T20:24:27.121106Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 4.  Sort the numerical attributes in a decreasing order based on their discriminative power","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_selection import f_classif\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"/kaggle/input/hotel-reservations-classification-dataset/Hotel Reservations.csv\")\ndf = pd.DataFrame(df)  # construct a dataframe\n\n# convert the booking_status from categorical to binary by encoding the categories with 0 and 1\ndf['booking_status_encoded'] = (df['booking_status'] == 'Canceled').astype(int)\n\n# select only the numerical attributes\nnumerical_df = df.select_dtypes(include=[np.number])\n\nX = numerical_df.drop('booking_status_encoded', axis=1)\ny = numerical_df['booking_status_encoded']\n\nf_values, _ = f_classif(X, y)\nf_scores = pd.Series(f_values, index=X.columns).sort_values(ascending=False)\n\nprint(f_scores)","metadata":{"execution":{"iopub.status.busy":"2024-04-02T20:38:32.262371Z","iopub.execute_input":"2024-04-02T20:38:32.262914Z","iopub.status.idle":"2024-04-02T20:38:32.441497Z","shell.execute_reply.started":"2024-04-02T20:38:32.262857Z","shell.execute_reply":"2024-04-02T20:38:32.439965Z"},"trusted":true},"execution_count":null,"outputs":[]}]}